<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<PROCEDURE_DEFINITION>
<DESCRIPTION>This procedure is used to add users that are found in the GFE application to the target group in MSTR. This procedure determines if a user exists in MSTR and also checks if they are already in the target group. If they exist in both nothing is done, if they exist in MSTR but not in the target group they are added. This process does not remove users from the GFE Group only adds them. sTargetGroup parameter should be the name of the GFE Group in MSTR.</DESCRIPTION>
<CODE>//String sGroup = "_TESTGROUP";&#13;
String sGroup = "Everyone";&#13;
String sGroupTarget = sTargetGroup;&#13;
&#13;
&#13;
//The following are user groups that the user should also be removed from if they are not to have GFE access&#13;
String sAddUser01 = "ADD USER \"&lt;LOGIN&gt;\" TO GROUP \"O_GOPS_GLOBAL_PLAN_AND_MERCH\";";&#13;
String sAddUser02 = "ADD USER \"&lt;LOGIN&gt;\" TO GROUP \"R_GOPS_005_WEB_BASIC\";";&#13;
String sAddUser03 = "ADD USER \"&lt;LOGIN&gt;\" TO GROUP \"R_GOPS_010_WEB_BASIC_PLUS\";";&#13;
String sAddUser04 = "ADD USER \"&lt;LOGIN&gt;\" TO GROUP \"R_GOPS_020_WEB_PLUS\";";&#13;
String sAddUser05 = "ADD USER \"&lt;LOGIN&gt;\" TO GROUP \"R_GOPS_030_VISUAL_INSIGHT\";";&#13;
&#13;
//The following strings are used to hold the values returned from the execution of the "List Members ..." command&#13;
String sMemberLogin;&#13;
//String sMemberFullName;&#13;
//String sMemberModificationTime;&#13;
boolean bMemberIsgroup;&#13;
&#13;
//String for List Login and NTLINK&#13;
String sListGroupMembers = "LIST MEMBERS FOR USER GROUP \"&lt;USER_GROUP&gt;\";";&#13;
&#13;
//String for Adding user to group&#13;
String sAddUser = "ADD USER \"&lt;LOGIN&gt;\" TO GROUP \"&lt;USER_GROUP&gt;\";";&#13;
&#13;
//**************************************************************************************&#13;
//DATABASE CONNECTION PARAMETERS&#13;
//CLASSPATH IN PROCEDURE MUST POINT TO LOCATION OF NZJDBC.jar file&#13;
String driverName = "org.netezza.Driver";&#13;
&#13;
String connectionURL = "jdbc:netezza://&lt;DBSERVER&gt;.poloralphlauren.com:5480/&lt;DATABASE&gt;";&#13;
	connectionURL = connectionURL.replace("&lt;DATABASE&gt;", sDatabase);&#13;
	connectionURL = connectionURL.replace("&lt;DBSERVER&gt;", sDbServer);&#13;
&#13;
//Database Login and password&#13;
String login = sDbLogin;&#13;
String password = sDbPassword;&#13;
&#13;
//Query to return all active users who have Merch Div security mapping&#13;
String dbQueryGfe = "SELECT DISTINCT(MUAC_USER_ID) from MAS_USER_ACCESS_V WHERE MUAC_ACCESS_LEVEL = 1 AND MUAC_ACCESS_PARM1 = '40' AND MUAC_ACCESS_STATUS = 'ACTIVE' ORDER BY 1";&#13;
&#13;
//*************************************************************************************&#13;
&#13;
//Replace place holder with User Group input string&#13;
String sListGroupMembersNew = sListGroupMembers.replace("&lt;USER_GROUP&gt;", sGroup);&#13;
&#13;
//Capture resultset of users returned&#13;
ResultSet oResultSetMembers = executeCapture(sListGroupMembersNew);&#13;
&#13;
&#13;
try {&#13;
	//*************************************************************************************&#13;
	//Define an arraylist and load the everyone group&#13;
	ArrayList alMembers = new ArrayList();&#13;
&#13;
	oResultSetMembers.moveFirst();&#13;
&#13;
	while (!oResultSetMembers.isEof()) {&#13;
&#13;
		//Populate resultset object with results&#13;
		ResultSet oMemberDetail = (ResultSet) oResultSetMembers.getFieldValue(DisplayPropertyEnum.MEMBER_RESULTSET);&#13;
&#13;
		//printOut("Numbers of Users: " + oMemberDetail.getRowCount());&#13;
&#13;
		//printOut("Array List size:" + alMembers.size());&#13;
&#13;
		//Loop through all users and populate an array&#13;
		oMemberDetail.moveFirst();&#13;
&#13;
		while (!oMemberDetail.isEof()) {&#13;
&#13;
&#13;
			String sLogin = oMemberDetail.getFieldValueString(LOGIN).toUpperCase();&#13;
			//Add user to array&#13;
			alMembers.add(sLogin);&#13;
&#13;
			//printOut("Array List size:" + alMembers.size());&#13;
			oMemberDetail.moveNext();&#13;
		}&#13;
		oResultSetMembers.moveNext();&#13;
	}&#13;
&#13;
	//printOut("All Values in the array" + alMembers);&#13;
	//printOut("Everyone group loaded into array list");&#13;
&#13;
	//*************************************************************************************&#13;
	//Load the Target Group Array&#13;
&#13;
	//String to hold the replaced text in the original string&#13;
	String sListGroupMembersTarget = sListGroupMembers.replace("&lt;USER_GROUP&gt;", sGroupTarget);&#13;
&#13;
	ResultSet oResultSetMembersTarget = executeCapture(sListGroupMembersTarget);&#13;
&#13;
	//Define an array list&#13;
	ArrayList alMembersTarget = new ArrayList();&#13;
&#13;
	oResultSetMembersTarget.moveFirst();&#13;
&#13;
	while (!oResultSetMembersTarget.isEof()) {&#13;
&#13;
		//Populate resultset object with results&#13;
		ResultSet oMemberDetailTarget = (ResultSet) oResultSetMembersTarget.getFieldValue(DisplayPropertyEnum.MEMBER_RESULTSET);&#13;
&#13;
		//printOut("Numbers of Users: " + oMemberDetailTarget.getRowCount());&#13;
&#13;
		//printOut("Array List size:" + alMembers.size());&#13;
&#13;
		//Loop through all users and populate an array&#13;
		oMemberDetailTarget.moveFirst();&#13;
&#13;
		while (!oMemberDetailTarget.isEof()) {&#13;
&#13;
			String sLoginTarget = oMemberDetailTarget.getFieldValueString(LOGIN).toUpperCase();&#13;
			//Add user to array&#13;
			alMembersTarget.add(sLoginTarget);&#13;
&#13;
			//printOut("Array List size:" + alMembers.size());&#13;
			oMemberDetailTarget.moveNext();&#13;
		}&#13;
		oResultSetMembersTarget.moveNext();&#13;
	}&#13;
&#13;
	//printOut("All Values in the array" + alMembers);&#13;
	//printOut(sGroupTarget + " group loaded into array list");&#13;
	&#13;
	//*************************************************************************************&#13;
	// QUERY DATABASE AND COMPARE USER AGAINST ARRAY TO SEE IF USER EXISTS&#13;
	// IF USER IS FOUND CHECK THEM AGAINST TARGET GROUP, IF THEY ARE NOT IN GROUP ADD THEM&#13;
	//*************************************************************************************&#13;
	try {&#13;
&#13;
		//load jdbc driver here&#13;
		Class.forName(driverName).newInstance();&#13;
&#13;
		//use jdbc url, database login, and database password to create connection&#13;
		//Create connection to database&#13;
		java.sql.Connection conn = java.sql.DriverManager.getConnection(connectionURL, login, password);&#13;
&#13;
		//Statement for query against DB&#13;
		java.sql.Statement stmt = conn.createStatement();&#13;
&#13;
		//String dbQueryGfeNew = dbQueryGfe.replace("&lt;USER_ID&gt;", sMemberLogin);&#13;
&#13;
		//Resultset returned from query&#13;
		java.sql.ResultSet userNames = stmt.executeQuery(dbQueryGfe);&#13;
&#13;
		//Move to first record from result. If there is no record returned it will fall to else statement	&#13;
		while (userNames.next()) {&#13;
			//Assign returned values to variables. These are then used when calling the stored procedure.&#13;
			String MuacUserId = userNames.getString(1);&#13;
			&#13;
			//Check if the user is in the Everyone group array&#13;
			if (alMembers.contains(MuacUserId)) {&#13;
&#13;
				//printOut("*** Found the name: " + MuacUserId);&#13;
				//If the user was found check if the user exists in the target group&#13;
				if (alMembersTarget.contains(MuacUserId)) {&#13;
&#13;
					//printOut("USER ALREADY EXISTS IN TARGET GROUP - DO NOTHING: " + MuacUserId);&#13;
&#13;
				} else {&#13;
					//printOut("USER DOES NOT EXIST IN TARGET GROUP: " + MuacUserId);&#13;
					&#13;
					String sAddUserNew = sAddUser.replace("&lt;LOGIN&gt;", MuacUserId);&#13;
					sAddUserNew = sAddUserNew.replace("&lt;USER_GROUP&gt;", sGroupTarget);&#13;
					//ADD USER TO TARGET GROUP&#13;
					execute(sAddUserNew);&#13;
&#13;
					//ADD user to the other GOPS groups so that they can run reports in the Global Operations project.&#13;
					String sAddUserNew01 = sAddUser01.replace("&lt;LOGIN&gt;", MuacUserId);&#13;
					execute(sAddUserNew01);&#13;
					String sAddUserNew02 = sAddUser02.replace("&lt;LOGIN&gt;", MuacUserId);&#13;
					execute(sAddUserNew02);&#13;
					String sAddUserNew03 = sAddUser03.replace("&lt;LOGIN&gt;", MuacUserId);&#13;
					execute(sAddUserNew03);&#13;
					String sAddUserNew04 = sAddUser04.replace("&lt;LOGIN&gt;", MuacUserId);&#13;
					execute(sAddUserNew04);&#13;
					String sAddUserNew05 = sAddUser05.replace("&lt;LOGIN&gt;", MuacUserId);&#13;
					execute(sAddUserNew05);&#13;
					&#13;
				}&#13;
&#13;
			} else {&#13;
				printOut("USER DOES NOT EXIST IN EVERYONE GROUP. CANNOT ADD TO TARGET GROUP: " + MuacUserId);&#13;
			}&#13;
&#13;
		}&#13;
&#13;
		stmt.close();&#13;
		conn.close();&#13;
&#13;
	} catch (Exception e) {&#13;
		printErr(e.getMessage());&#13;
	}&#13;
	//*************************************************************************************	&#13;
&#13;
&#13;
&#13;
} catch (Exception e) {&#13;
	printErr(e.getMessage());&#13;
}</CODE>
<SAMPLE>EXECUTE PROCEDURE GFE_MSTRGROUP_ADD ("Q_MSI_MISC","PWD","GLOBAL_QA_MSI","S_GPMW_GFE_USERS","RLNZPRD");</SAMPLE>
<VERSION>1.1</VERSION>
<TYPE>CUSTOM</TYPE>
<INPUT_PARAMS>
<INPUT INPUT_TYPE="STRING">sDbLogin</INPUT>
<INPUT INPUT_TYPE="STRING">sDbPassword</INPUT>
<INPUT INPUT_TYPE="STRING">sDatabase</INPUT>
<INPUT INPUT_TYPE="STRING">sTargetGroup</INPUT>
<INPUT INPUT_TYPE="STRING">sDbServer</INPUT>
</INPUT_PARAMS>
<CLASSPATH>
<CLASSPATH_ITEM>nzjdbc.jar</CLASSPATH_ITEM>
</CLASSPATH>
<TEST_INPUT>
<TEST_INPUT_PARAM/>
<TEST_INPUT_PARAM/>
<TEST_INPUT_PARAM/>
<TEST_INPUT_PARAM/>
<TEST_INPUT_PARAM/>
</TEST_INPUT>
<TEST_CONNECTION_INFO>
<TEST_PSN_NAME>QATSOURCE</TEST_PSN_NAME>
<TEST_USERNAME>administrator</TEST_USERNAME>
<TEST_PASSWORD></TEST_PASSWORD>
</TEST_CONNECTION_INFO>
</PROCEDURE_DEFINITION>
