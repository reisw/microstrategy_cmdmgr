<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<PROCEDURE_DEFINITION>
<DESCRIPTION>This procedure queries currently running jobs and their properties.</DESCRIPTION>
<CODE> String sListServerName = "LIST NAME FOR SERVER CONFIGURATION;";&#13;
&#13;
 String sListAllJobs = "LIST ALL JOBS;";&#13;
&#13;
 String sListAllJobsProps = "LIST ALL PROPERTIES FOR JOB &lt;JOB_ID&gt;;";&#13;
&#13;
 String sDelim = " , ";&#13;
&#13;
 //GET ISERVER NAME WHERE SCRIPT IS BEING EXECUTED&#13;
 ResultSet rsServerName = executeCapture(sListServerName);&#13;
 rsServerName.moveFirst();&#13;
 String sServerName = rsServerName.getFieldValueString(NAME);&#13;
 &#13;
 //GET ALL RUNNING JOBS&#13;
 ResultSet rsJobs = executeCapture(sListAllJobs);&#13;
 rsJobs.moveFirst();&#13;
&#13;
 org.json.simple.JsonObject jsonobj = new org.json.simple.JsonObject();&#13;
&#13;
&#13;
 org.json.simple.JsonArray jsonarr = new org.json.simple.JsonArray();&#13;
&#13;
&#13;
 for (int i = 0; i &lt; rsJobs.getRowCount(); i++, rsJobs.moveNext()) {&#13;
  //JSON OBJECT&#13;
  org.json.simple.JsonObject job_detailobj = new org.json.simple.JsonObject();&#13;
&#13;
  org.apache.commons.lang3.text.StrBuilder sJobsData = new org.apache.commons.lang3.text.StrBuilder();&#13;
&#13;
&#13;
&#13;
  int sJobId = (Integer) rsJobs.getFieldValue(JOB_ID);&#13;
  String sJobOwner = rsJobs.getFieldValueString(OWNER);&#13;
  String sJobStatus = rsJobs.getFieldValueString(JOB_STATUS);&#13;
  String sJobDescription = rsJobs.getFieldValueString(DESCRIPTION);&#13;
  String sJobCreationTime = rsJobs.getFieldValueString(CREATION_TIME);&#13;
  String sJobProjectId = rsJobs.getFieldValueString(PROJECT_ID);&#13;
  String sJobProject = rsJobs.getFieldValueString(PROJECT);&#13;
  String sJobDuration = rsJobs.getFieldValueString(JOB_DURATION);&#13;
&#13;
  jsonobj.put("JOB_ID", sJobId);&#13;
  //printOut(jsonobj);&#13;
  //printOut(sJobId + sDelim + sJobOwner + sDelim + sJobStatus + sDelim + sJobDescription + sDelim + sJobCreationTime + sDelim + sJobProjectId + sDelim + sJobProject + sDelim + sJobDuration);&#13;
&#13;
  for (int x = 0; x &lt; rsJobs.getColumnCount(); x++) {&#13;
&#13;
   //printOut("Column:" + x);&#13;
   //printOut(job_detailobj);&#13;
   //printOut(jsonarr);&#13;
   //sJobsData.append(rsJobs.getResultCell(x).getName());&#13;
   //sJobsData.appendSeparator(":", null);&#13;
   sJobsData.append(rsJobs.getResultCell(x).getValue());&#13;
   sJobsData.appendSeparator("|", null);&#13;
&#13;
   if (rsJobs.getResultCell(x).getName().equals("Creation Time")) {&#13;
    //job_detailobj.put(rsJobs.getResultCell(x).getName(),rsJobs.getResultCell(x).getValue().toString());&#13;
    job_detailobj.put(rsJobs.getResultCell(x).getName(), rsJobs.getResultCell(x).getValue().toString());&#13;
   } else {&#13;
&#13;
&#13;
    job_detailobj.put(rsJobs.getResultCell(x).getName(), rsJobs.getResultCell(x).getValue());&#13;
&#13;
&#13;
   }&#13;
  }&#13;
 &#13;
&#13;
&#13;
  String sListAllJobsPropsNew = sListAllJobsProps.replace("&lt;JOB_ID&gt;", Integer.toString(sJobId));&#13;
  ResultSet rsJobsProps = executeCapture(sListAllJobsPropsNew);&#13;
&#13;
 job_detailobj.put("ISERVER_NAME", sServerName);&#13;
&#13;
  rsJobsProps.moveFirst();&#13;
&#13;
  for (int y = 0; y &lt; rsJobsProps.getColumnCount(); y++) {&#13;
   //sJobsData.append(rsJobs.getResultCell(x).getName());&#13;
   //sJobsData.appendSeparator(":", null);&#13;
   sJobsData.append(rsJobsProps.getResultCell(y).getValue());&#13;
   sJobsData.appendSeparator("|", null);&#13;
	//printOut(rsJobsProps.getResultCell(y).getName());&#13;
 	switch (rsJobsProps.getResultCell(y).getName()){&#13;
&#13;
	case "SQL query":&#13;
//		printOut("SQL QUERY");&#13;
		job_detailobj.put(rsJobsProps.getResultCell(y).getName(), rsJobsProps.getResultCell(y).getValue().toString());&#13;
		break;&#13;
	case "Creation Time":&#13;
//		printOut("CREATION TIME");&#13;
		job_detailobj.put(rsJobsProps.getResultCell(y).getName(), rsJobsProps.getResultCell(y).getValue().toString());&#13;
		break;&#13;
//	case "Description":&#13;
//		printOut("Description");&#13;
//		job_detailobj.put(rsJobsProps.getResultCell(y).getName(), rsJobsProps.getResultCell(y).getValue().toString());&#13;
//		break;&#13;
//	case "Job Status":&#13;
//		printOut("Job Status");&#13;
//		job_detailobj.put(rsJobsProps.getResultCell(y).getName(), rsJobsProps.getResultCell(y).getValue().toString());&#13;
//		break;&#13;
//	case "Client Machine":&#13;
//		printOut("Client Machine");&#13;
//		job_detailobj.put(rsJobsProps.getResultCell(y).getName(), rsJobsProps.getResultCell(y).getValue().toString());&#13;
//		break;&#13;
//	case "Server Machine":&#13;
//		printOut("Server Machine");&#13;
//		job_detailobj.put(rsJobsProps.getResultCell(y).getName(), rsJobsProps.getResultCell(y).getValue().toString());&#13;
//		break;&#13;
//	case "Owner":&#13;
//		printOut("Owner");&#13;
//		job_detailobj.put(rsJobsProps.getResultCell(y).getName(), rsJobsProps.getResultCell(y).getValue().toString());&#13;
//		break;&#13;
//	case "Job Priority":&#13;
//		printOut("Job Priority");&#13;
//		job_detailobj.put(rsJobsProps.getResultCell(y).getName(), rsJobsProps.getResultCell(y).getValue().toString());&#13;
//		break;&#13;
//	case "Project ID":&#13;
//		printOut("Project ID");&#13;
//		job_detailobj.put(rsJobsProps.getResultCell(y).getName(), rsJobsProps.getResultCell(y).getValue().toString());&#13;
//		break;&#13;
//	case "Project":&#13;
//		printOut("Project");&#13;
//		job_detailobj.put(rsJobsProps.getResultCell(y).getName(), rsJobsProps.getResultCell(y).getValue().toString());&#13;
//		break;&#13;
//	case "Filter":&#13;
//		printOut("Filter");&#13;
//		job_detailobj.put(rsJobsProps.getResultCell(y).getName(), rsJobsProps.getResultCell(y).getValue().toString());&#13;
//		break;&#13;
//	case "Number of Tasks":&#13;
//		printOut("Number of Tasks");&#13;
//		job_detailobj.put(rsJobsProps.getResultCell(y).getName(), rsJobsProps.getResultCell(y).getValue().toString());&#13;
//		break;&#13;
//	case "Number of Finished Tasks":&#13;
//		printOut("Number of Finished Tasks");&#13;
//		job_detailobj.put(rsJobsProps.getResultCell(y).getName(), rsJobsProps.getResultCell(y).getValue().toString());&#13;
//		break;&#13;
//	case "Template":&#13;
//		printOut("Template");&#13;
//		job_detailobj.put(rsJobsProps.getResultCell(y).getName(), rsJobsProps.getResultCell(y).getValue().toString());&#13;
//		break;&#13;
//	case "Job Duration":&#13;
//		printOut("Job Duration");&#13;
//		job_detailobj.put(rsJobsProps.getResultCell(y).getName(), rsJobsProps.getResultCell(y).getValue().toString());&#13;
//		break;&#13;
//	case "Job ID":&#13;
//		printOut("Job ID");&#13;
//		job_detailobj.put(rsJobsProps.getResultCell(y).getName(), rsJobsProps.getResultCell(y).getValue().toString());&#13;
//		break;&#13;
	default:&#13;
//		printOut("DEFAULT");&#13;
//		printOut("-" + rsJobsProps.getResultCell(y).getName() + "-");&#13;
		//printOut("-" + rsJobsProps.getResultCell(y).getValue() + "-");&#13;
		job_detailobj.put(rsJobsProps.getResultCell(y).getName(), rsJobsProps.getResultCell(y).getValue());&#13;
		//job_detailobj.put(rsJobsProps.getResultCell(y).getName(), rsJobsProps.getResultCell(y).getValue().toString());&#13;
	&#13;
	}&#13;
	&#13;
//	if (rsJobsProps.getResultCell(y).getName().equals("SQL query")) {&#13;
//    	//printOut("SQL");&#13;
//	job_detailobj.put(rsJobsProps.getResultCell(y).getName(), rsJobsProps.getResultCell(y).getValue().toString());&#13;
//   	&#13;
//	} else {&#13;
//&#13;
//	//printOut("NO MATCH");&#13;
//	printOut("-" + rsJobsProps.getResultCell(y).getName() + "-");&#13;
//	printOut("-" + rsJobsProps.getResultCell(y).getValue() + "-");&#13;
//	    job_detailobj.put(rsJobsProps.getResultCell(y).getName(), rsJobsProps.getResultCell(y).getValue());&#13;
//	}&#13;
&#13;
&#13;
   	//job_detailobj.put(rsJobsProps.getResultCell(y).getName(), rsJobsProps.getResultCell(y).getValue().toString());&#13;
   &#13;
   &#13;
  }&#13;
&#13;
  //printOut(rsJobsProps.getFieldValueString(NUMBER_OF_FINISHED_TASKS));&#13;
  //printOut(rsJobsProps.getFieldValueString(CLIENT_MACHINE));&#13;
&#13;
&#13;
&#13;
&#13;
  //jsonobj.writeJSONString(sJobsData.toString());&#13;
  //jsonobj.put("STRINGSTUFF","VALUES");&#13;
&#13;
  //printOut(jsonobj);&#13;
&#13;
  //printOut(sJobId + " - " + sJobStatus + " - " + sJobOwner + " - " + sJobsDescription );&#13;
&#13;
&#13;
  //printOut(sJobsData);&#13;
  &#13;
  &#13;
   jsonarr.add(job_detailobj);&#13;
  //printOut(jsonarr);&#13;
  //jsonobj.put("JOB_DETAILS",jsonarr);&#13;
  job_detailobj = null;&#13;
  //jsonarr = null;  &#13;
  &#13;
  sJobsData = null;&#13;
  //printOut(sJobId);&#13;
 }&#13;
&#13;
 //printOut(jsonarr);&#13;
 //System.out.print(jsonarr);&#13;
&#13;
 BufferedReader oBufReader = null;&#13;
 String sLine = null;&#13;
 //File oDir = new File (sFileDir);&#13;
&#13;
 //BufferedWriter bw = null;&#13;
 //printOut(jsonarr);&#13;
 if (jsonarr.isEmpty()) {&#13;
  printOut(jsonarr + "NULLLLLLLLL");&#13;
  //System.out.print(jsonarr);&#13;
 } else {&#13;
  //printOut("NOTTTTTTTTTT");&#13;
  //printOut(org.json.simple.Jsoner.serialize(jsonarr));&#13;
  //System.out.print(jsonarr.toJson());&#13;
  //System.out.print(jsonarr);&#13;
  //System.out.print(org.json.simple.Jsoner.deserialize(jsonarr.toJson()));&#13;
  System.out.print(org.json.simple.Jsoner.serialize(jsonarr));&#13;
&#13;
 };&#13;
&#13;
 </CODE>
<SAMPLE/>
<VERSION>1.0</VERSION>
<TYPE>CUSTOM</TYPE>
<INPUT_PARAMS/>
<CLASSPATH>
<CLASSPATH_ITEM>.\jar\commons-lang3-3.4.jar</CLASSPATH_ITEM>
<CLASSPATH_ITEM>.\jar\json-simple-2.1.2.jar</CLASSPATH_ITEM>
</CLASSPATH>
<TEST_INPUT/>
<TEST_CONNECTION_INFO>
<TEST_PSN_NAME>PRDSOURCE</TEST_PSN_NAME>
<TEST_USERNAME>administrator</TEST_USERNAME>
<TEST_PASSWORD></TEST_PASSWORD>
</TEST_CONNECTION_INFO>
</PROCEDURE_DEFINITION>
